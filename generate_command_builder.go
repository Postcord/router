// +build ignore

package main

import (
	"bytes"
	"io/ioutil"
	"strings"
	"text/template"
)

const start = `// Code generated by generate_command_builder.go; DO NOT EDIT.

package router

//go:generate go run generate_command_builder.go

import "github.com/Postcord/objects"

`

const builderShared = `type {{ .Struct }} struct {
	*commandBuilder
}

func (c {{ .Struct }}) Option(option *objects.ApplicationCommandOption) {{ .BuilderType }}Builder {
	c.commandBuilder.Option(option)
	return c
}

func (c {{ .Struct }}) DefaultPermission() {{ .BuilderType }}Builder {
	c.commandBuilder.DefaultPermission()
	return c
}

func (c {{ .Struct }}) AllowedMentions(config *objects.AllowedMentions) {{ .BuilderType }}Builder {
	c.commandBuilder.AllowedMentions(config)
	return c
}{{ if not .DoNotHook }}

func (c *commandBuilder) {{ .BuilderType }}() {{ .BuilderType }}Builder {
	c.cmd.commandType = int({{ .CommandType }})
	return {{ .Struct }}{c}
}{{ end }}`

var types = []struct{
	Struct      string
	BuilderType string
	CommandType string
	DoNotHook   bool
}{
	{
		Struct:      "textCommandBuilder",
		BuilderType: "TextCommand",
		CommandType: "objects.CommandTypeChatInput",
	},
	{
		Struct:      "subcommandBuilder",
		BuilderType: "SubCommand",
		CommandType: "objects.CommandTypeChatInput",
		DoNotHook:   true,
	},
	{
		Struct:      "messageCommandBuilder",
		BuilderType: "MessageCommand",
		CommandType: "objects.CommandTypeMessage",
	},
	{
		Struct:      "userCommandBuilder",
		BuilderType: "UserCommand",
		CommandType: "objects.CommandTypeUser",
	},
}

func main() {
	file := start
	parts := make([]string, len(types))
	t, err := template.New("_").Parse(builderShared)
	if err != nil {
		panic(err)
	}
	for i, v := range types {
		buf := &bytes.Buffer{}
		if err := t.Execute(buf, v); err != nil {
			panic(err)
		}
		parts[i] = buf.String()
	}
	file += strings.Join(parts, "\n\n") + "\n"
	if err := ioutil.WriteFile("command_builder_gen.go", []byte(file), 0666); err != nil {
		panic(err)
	}
}
